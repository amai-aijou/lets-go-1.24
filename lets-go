# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# @               ---------                 @
# @		          Let's Go!	    			@
# @               ---------                 @
# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#

#####################################
      "Chapter 2 - Foundations"
#####################################

"Web Application Basics"

  "Handler"
  - Execute application logic, write HTTP Response Headers

  "Router" ("servemux", in Go terminology)
  - Stores mappings between URL routing patterns and handlers.

  "Web Server"
  - Listens for incoming requests. Go handles natively, without nginx etc!


"Routing Requests"

  "HTTP Matching Patterns"
  - When an HTTP link ends in a trailing slash, it's known as "Subtree Path Pattern"
  - Matched (and the corresponding handler called) when the start of a URL matches 
  - Subtree paths match as if they had wildcards at the end
  - /html matches /html and /html/foo=bar ... but NOT /html/test
  - /html/ matches /html/ and /html/foo/bar
  - This is why / is a catch-all; it will match anything

 "Restricting Subtrees"
  - appending {$} prevents subtrees from behaving like wildcard suffixes
  - /static/{$} will only match /static/

  "Additional servemux features"
  - Request URL paths are auto-sanitized:
      /foo//bar/../baz/./ auto-sends a 301 Permanent Redirect to /foo/baz/
  - Request URL paths with subtrees are auto-redirected:
      /foo will be redirected to /foo/, even if /foo exists

  "Hostname Matching"
  - hostnames can be used in route patterns, ie. mux.HandleFunc("foo.example.org/", fooHandler) 
  - host-specific patterns are always checked before non-host

  "Default servemux"
  - http.Handle() & http.HandleFunc() register routes without explicitly declaring a servemux
  - "http.DefaultServeMux": global variable for the default servemux. initialized automatically by Go
  - Not Recommended! Any 3rd-party package your app imports can register potentially dangerous routes


"Wildcard Route Patterns"

  "Wildcard Segments"
  - Denoted by braces {}, ie mux.HandleFunc("/products/{category}/item", exampleHandler)

  "Precedence and conflicts"
  - When route patterns overlap in Go, the more specific one wins! If one is a subset of the other, it's preferred
  - If a route ends with a wildcard and ..., it will match any and all remaining segments of a path:
      /post/{path...}
    This allows you to access the entire wildcard portion of the URL via the r.PathValue() method though!

  "HTTP Method Precedence"
  - The most specific pattern will still win here, which includes the HTTP method. POST foo/bar will beat foo/bar

"HTTP Status Codes"

  "w.WriteHeader"
  - Only possible once per response. Afte the code has been written, it can't be changed (logs a warning)
  - without w.WriteHeader(), first w.Write() call will auto-send a 200 code.
  - All header map changes must be made before calling w.WriteHeader or w.Write

  "net/http HTTP Code Constants"
  - Provides default HTTP code constants, representing each code: StatusOK, Statuscreated, StatusAccepted (201/2/3, respectively)
  - Also provides API request types: MethodGet, MethodHead, MethodPut, etc

"http.FileServer Handler"
  - Sanitizes requests by running through path.Clean() before searching for files. Removes . and .. from URL paths (stops dir. traversal attacks)
  - Range requests are supported, which allows for splitting and partial downlaods, ie:
      curl -h -H "Range: bytes=100-199"
  - If not modified since last request, will send 304 Not Modified
  - Generally not used in production, as recently-opened files will be stored in RAM


##################################################
  "Chapter 3 - Configuration and Error Handling"
##################################################

"Command-line flags"
  - flag.String(), flag.Int(), flag.Bool() etc allow for CLI flags to be passed in
  - flag.Parse() *must* be run before utilizing any variables, as it reads in the values and actually assigns them
  - ENV variables can be used, but not recommended, as they can't contain default values; instead, pass $ENV into flag.String()!

"Structured Logging"
  - Commonly instantiated at the same time as configuration (via handler), resulting in singular command:
      logger := slog.New(slog.NewTextHandler(os.Stdout, &slog.HandlerOptions{...}))
  - "Variadic methods" used to create log entries, such as Debug(), Info(), Warn(), Error(). Command and output below:
      logger.Info("request received", "method", "GET", "path", "/")
        time=2024-03-18T11:29:23.000+00:00 level=INFO msg="request received" method=GET path=/
  - Attributes must always be strings, but values can be of any type. ", =, and whitespace are auto-wrapped in double quotes in output


##################################################
  "Chapter 3 - Configuration and Error Handling"
##################################################

"Database Connection Pools"
  - Go can connect directly to databases through a function: sql.Open("mysql", "web:pass@/example?parseTime=true")
  - sql.Open(Driver Name, Data Source Name) The latter is also known as DSN, which shows how to connect to a database
  - parseTime is driver-specific and instructs it to convert SQL TIME and DATE fields to Go time.time values 
  - returns a pool of many connections, not a singular database value. Go manages connections as needed
  - Long-lived. Can initialize in main() and pass to handlers. don't just call in the handler.
  - 
